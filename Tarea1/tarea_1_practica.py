# -*- coding: utf-8 -*-
#DSCE
"""Tarea 1.Practica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LnRI9Pg6S47lUo8Gl5GoG4nXCj5C-KNR
"""

#Coloca en orden la siguiente lista de palabras, puede ser por medio de una lista o un diccionario.
palabras = ["Luna", "Montaña", "Río", "Espejo", "Relámpago", "Bosque", "Sombrero", "Silencio",
    "Relato", "Destino", "Horizonte", "Brisa", "Guitarra", "Susurro", "Ébano", "Marea",
    "Laberinto", "Aurora", "Océano", "Centella", "Murmullo", "Papiro", "Fuego", "Nostalgia",
    "Mariposa", "Reloj", "Tempestad", "Neblina", "Destello", "Ceniza"]

palabras_ord = sorted(palabras)

#Donde se encuentra la palabra Murmullo?
pos_murmullo = palabras_ord.index("Murmullo") + 1

#cual es la palabra en el lugar 17?
pos_17 = palabras_ord[16]

#resultados
print("Palabras ordenadas:", palabras_ord)
print("Murmullo se encuentra en la posición:", pos_murmullo)
print("La palabra en el lugar 17 es:", pos_17)

#Crea un c ́odigo para el Sistema de Punto Flotante, hazlo para el formato compuesto.
# Función para convertir un número decimal a binario 64 bits
def decimal_a_binario64bits(num):
    # Separar la parte entera y la fraccionaria
    entero = int(num)
    fraccion = num - entero

    # Convertir la parte entera a binario
    bin_entero = bin(entero)[2:]

    # Convertir la parte fraccionaria a binario
    bin_fraccion = ""
    while fraccion and len(bin_fraccion) < 52:  # Máximo 52 bits para la mantisa
        fraccion *= 2
        bit = int(fraccion)
        bin_fraccion += str(bit)
        fraccion -= bit

    return f"{bin_entero}.{bin_fraccion}"

# Función para convertir un binario a decimal
def binario_a_decimal64bits(binario_):
    # Separar la parte entera y la fraccionaria del binario
    if '.' in binario_:
        entero, fraccion = binario_.split('.')
    else:
        entero, fraccion = binario_, '0'

    # Convertir la parte entera binaria a decimal
    decimal_entero = int(entero, 2)

    # Convertir la parte fraccionaria binaria a decimal
    decimal_fraccion = sum(int(bit) * 2**-(i+1) for i, bit in enumerate(fraccion))

    # Sumar ambas partes para obtener el número decimal final
    return decimal_entero + decimal_fraccion


# Ejemplo
numero_decimal = 36.17
binario = decimal_a_binario64bits(numero_decimal)
print(f"Decimal {numero_decimal} en binario (64 bits): {binario}")

numero_recuperado = binario_a_decimal64bits(binario)
print(f"Binario {binario} convertido a decimal (64 bits): {numero_recuperado}")

#En clase vimos como crear un c ́odigo para convertir un n ́umero decimal a binario. ¿Cu ́al ser ́ıa el
#codigo para pasar de binario a decimal?

# Función para convertir un binario a decimal
def binario_a_decimal64bits(binario_):
   # Separar la parte entera y la fraccionaria del binario
    if '.' in binario_:
        entero, fraccion = binario_.split('.')
    else:
        entero, fraccion = binario_, '0'

    # Convertir la parte entera binaria a decimal
    decimal_entero = int(entero, 2)
     # Convertir la parte fraccionaria binaria a decimal
    decimal_fraccion = sum(int(bit) * 2**-(i+1) for i, bit in enumerate(fraccion))

    return decimal_entero + decimal_fraccion

# Solicitar un numero
binario_usuario = input("Ingrese un número binario: ")
numero_decimal = binario_a_decimal64bits(binario_usuario)
print(f"El número binario {binario_usuario} convertido a decimal es: {numero_decimal}")